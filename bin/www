#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('my_music_server:server');
var http = require('http');
var https = require('https');
var path = require('path');
var fs = require('fs');

//根据项目的路径导入生成的证书文件  
var privateKey  = fs.readFileSync(path.join(__dirname, '../certificate/private.pem'), 'utf8'),
    certificate = fs.readFileSync(path.join(__dirname, '../certificate/file.crt'), 'utf8'),
    credentials = {key: privateKey, cert: certificate};
var httpServer = http.createServer(app),
    httpsServer = https.createServer(credentials, app);
//可以分别设置http、https的访问端口号  
var PORT = normalizePort(process.env.PORT || '3111');
app.set('port', PORT);
var SSLPORT = normalizePort(process.env.SSLPORT || '3112');
app.set('sslport', SSLPORT);
//创建http服务器  
httpServer.listen(PORT, function() {
    console.log('HTTP Server is running on: http://localhost:%s', PORT);  
});
httpServer.on('error', onError);
httpServer.on('listening', onListening);
//创建https服务器  
httpsServer.listen(SSLPORT, function() {
    console.log('HTTPS Server is running on: https://localhost:%s', SSLPORT);  
});
httpsServer.on('error', onHttpsError);
httpsServer.on('listening', onHttpsListening);

/**
 * Get port from environment and store in Express.
 */

// var port = normalizePort(process.env.PORT || '3111');
// app.set('port', port);

/**
 * Create HTTP server.
 */

// var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

// server.listen(port);
// server.on('error', onError);
// server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onHttpsError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof sslport === 'string'
    ? 'Pipe ' + sslport
    : 'Port ' + sslport;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = httpServer.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

function onHttpsListening() {
  var addr = httpsServer.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
